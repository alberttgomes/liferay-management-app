/**
 * SPDX-FileCopyrightText: (c) 2024 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.management.app.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import com.management.app.model.Manager;
import com.management.app.model.ManagerModel;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Manager service. Represents a row in the &quot;Management_Manager&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>ManagerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ManagerImpl}.
 * </p>
 *
 * @author Albert Cabral
 * @see ManagerImpl
 * @generated
 */
@JSON(strict = true)
public class ManagerModelImpl
	extends BaseModelImpl<Manager> implements ManagerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a manager model instance should use the <code>Manager</code> interface instead.
	 */
	public static final String TABLE_NAME = "Management_Manager";

	public static final Object[][] TABLE_COLUMNS = {
		{"mvccVersion", Types.BIGINT}, {"uuid_", Types.VARCHAR},
		{"managerId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"firstName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"employeeIdPK", Types.BIGINT},
		{"position", Types.VARCHAR}, {"stateCode", Types.VARCHAR},
		{"status", Types.INTEGER}, {"companyTime", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mvccVersion", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("managerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("employeeIdPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stateCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("companyTime", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Management_Manager (mvccVersion LONG default 0 not null,uuid_ VARCHAR(75) null,managerId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,lastName VARCHAR(75) null,employeeIdPK LONG,position VARCHAR(75) null,stateCode VARCHAR(75) null,status INTEGER,companyTime INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table Management_Manager";

	public static final String ORDER_BY_JPQL =
		" ORDER BY manager.firstName ASC, manager.lastName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Management_Manager.firstName ASC, Management_Manager.lastName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FIRSTNAME_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long LASTNAME_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MANAGERID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public ManagerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _managerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setManagerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _managerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Manager.class;
	}

	@Override
	public String getModelClassName() {
		return Manager.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Manager, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Manager, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manager, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Manager)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Manager, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Manager, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Manager)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Manager, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Manager, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Manager, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Manager, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Manager, Object>>();

			attributeGetterFunctions.put(
				"mvccVersion", Manager::getMvccVersion);
			attributeGetterFunctions.put("uuid", Manager::getUuid);
			attributeGetterFunctions.put("managerId", Manager::getManagerId);
			attributeGetterFunctions.put("groupId", Manager::getGroupId);
			attributeGetterFunctions.put("companyId", Manager::getCompanyId);
			attributeGetterFunctions.put("createDate", Manager::getCreateDate);
			attributeGetterFunctions.put(
				"modifiedDate", Manager::getModifiedDate);
			attributeGetterFunctions.put("firstName", Manager::getFirstName);
			attributeGetterFunctions.put("lastName", Manager::getLastName);
			attributeGetterFunctions.put(
				"employeeIdPK", Manager::getEmployeeIdPK);
			attributeGetterFunctions.put("position", Manager::getPosition);
			attributeGetterFunctions.put("stateCode", Manager::getStateCode);
			attributeGetterFunctions.put("status", Manager::getStatus);
			attributeGetterFunctions.put(
				"companyTime", Manager::getCompanyTime);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Manager, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Manager, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Manager, ?>>();

			attributeSetterBiConsumers.put(
				"mvccVersion",
				(BiConsumer<Manager, Long>)Manager::setMvccVersion);
			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Manager, String>)Manager::setUuid);
			attributeSetterBiConsumers.put(
				"managerId", (BiConsumer<Manager, Long>)Manager::setManagerId);
			attributeSetterBiConsumers.put(
				"groupId", (BiConsumer<Manager, Long>)Manager::setGroupId);
			attributeSetterBiConsumers.put(
				"companyId", (BiConsumer<Manager, Long>)Manager::setCompanyId);
			attributeSetterBiConsumers.put(
				"createDate",
				(BiConsumer<Manager, Date>)Manager::setCreateDate);
			attributeSetterBiConsumers.put(
				"modifiedDate",
				(BiConsumer<Manager, Date>)Manager::setModifiedDate);
			attributeSetterBiConsumers.put(
				"firstName",
				(BiConsumer<Manager, String>)Manager::setFirstName);
			attributeSetterBiConsumers.put(
				"lastName", (BiConsumer<Manager, String>)Manager::setLastName);
			attributeSetterBiConsumers.put(
				"employeeIdPK",
				(BiConsumer<Manager, Long>)Manager::setEmployeeIdPK);
			attributeSetterBiConsumers.put(
				"position", (BiConsumer<Manager, String>)Manager::setPosition);
			attributeSetterBiConsumers.put(
				"stateCode",
				(BiConsumer<Manager, String>)Manager::setStateCode);
			attributeSetterBiConsumers.put(
				"status", (BiConsumer<Manager, Integer>)Manager::setStatus);
			attributeSetterBiConsumers.put(
				"companyTime",
				(BiConsumer<Manager, Integer>)Manager::setCompanyTime);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@JSON
	@Override
	public long getMvccVersion() {
		return _mvccVersion;
	}

	@Override
	public void setMvccVersion(long mvccVersion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mvccVersion = mvccVersion;
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getManagerId() {
		return _managerId;
	}

	@Override
	public void setManagerId(long managerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_managerId = managerId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalManagerId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("managerId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_firstName = firstName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFirstName() {
		return getColumnOriginalValue("firstName");
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lastName = lastName;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalLastName() {
		return getColumnOriginalValue("lastName");
	}

	@JSON
	@Override
	public long getEmployeeIdPK() {
		return _employeeIdPK;
	}

	@Override
	public void setEmployeeIdPK(long employeeIdPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_employeeIdPK = employeeIdPK;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_position = position;
	}

	@JSON
	@Override
	public String getStateCode() {
		if (_stateCode == null) {
			return "";
		}
		else {
			return _stateCode;
		}
	}

	@Override
	public void setStateCode(String stateCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_stateCode = stateCode;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public int getCompanyTime() {
		return _companyTime;
	}

	@Override
	public void setCompanyTime(int companyTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyTime = companyTime;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Manager.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Manager.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Manager toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Manager>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ManagerImpl managerImpl = new ManagerImpl();

		managerImpl.setMvccVersion(getMvccVersion());
		managerImpl.setUuid(getUuid());
		managerImpl.setManagerId(getManagerId());
		managerImpl.setGroupId(getGroupId());
		managerImpl.setCompanyId(getCompanyId());
		managerImpl.setCreateDate(getCreateDate());
		managerImpl.setModifiedDate(getModifiedDate());
		managerImpl.setFirstName(getFirstName());
		managerImpl.setLastName(getLastName());
		managerImpl.setEmployeeIdPK(getEmployeeIdPK());
		managerImpl.setPosition(getPosition());
		managerImpl.setStateCode(getStateCode());
		managerImpl.setStatus(getStatus());
		managerImpl.setCompanyTime(getCompanyTime());

		managerImpl.resetOriginalValues();

		return managerImpl;
	}

	@Override
	public Manager cloneWithOriginalValues() {
		ManagerImpl managerImpl = new ManagerImpl();

		managerImpl.setMvccVersion(
			this.<Long>getColumnOriginalValue("mvccVersion"));
		managerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		managerImpl.setManagerId(
			this.<Long>getColumnOriginalValue("managerId"));
		managerImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		managerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		managerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		managerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		managerImpl.setFirstName(
			this.<String>getColumnOriginalValue("firstName"));
		managerImpl.setLastName(
			this.<String>getColumnOriginalValue("lastName"));
		managerImpl.setEmployeeIdPK(
			this.<Long>getColumnOriginalValue("employeeIdPK"));
		managerImpl.setPosition(
			this.<String>getColumnOriginalValue("position"));
		managerImpl.setStateCode(
			this.<String>getColumnOriginalValue("stateCode"));
		managerImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		managerImpl.setCompanyTime(
			this.<Integer>getColumnOriginalValue("companyTime"));

		return managerImpl;
	}

	@Override
	public int compareTo(Manager manager) {
		int value = 0;

		value = getFirstName().compareTo(manager.getFirstName());

		if (value != 0) {
			return value;
		}

		value = getLastName().compareTo(manager.getLastName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Manager)) {
			return false;
		}

		Manager manager = (Manager)object;

		long primaryKey = manager.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Manager> toCacheModel() {
		ManagerCacheModel managerCacheModel = new ManagerCacheModel();

		managerCacheModel.mvccVersion = getMvccVersion();

		managerCacheModel.uuid = getUuid();

		String uuid = managerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			managerCacheModel.uuid = null;
		}

		managerCacheModel.managerId = getManagerId();

		managerCacheModel.groupId = getGroupId();

		managerCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			managerCacheModel.createDate = createDate.getTime();
		}
		else {
			managerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			managerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			managerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		managerCacheModel.firstName = getFirstName();

		String firstName = managerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			managerCacheModel.firstName = null;
		}

		managerCacheModel.lastName = getLastName();

		String lastName = managerCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			managerCacheModel.lastName = null;
		}

		managerCacheModel.employeeIdPK = getEmployeeIdPK();

		managerCacheModel.position = getPosition();

		String position = managerCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			managerCacheModel.position = null;
		}

		managerCacheModel.stateCode = getStateCode();

		String stateCode = managerCacheModel.stateCode;

		if ((stateCode != null) && (stateCode.length() == 0)) {
			managerCacheModel.stateCode = null;
		}

		managerCacheModel.status = getStatus();

		managerCacheModel.companyTime = getCompanyTime();

		return managerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Manager, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Manager, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Manager, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Manager)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Manager>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Manager.class, ModelWrapper.class);

	}

	private long _mvccVersion;
	private String _uuid;
	private long _managerId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _lastName;
	private long _employeeIdPK;
	private String _position;
	private String _stateCode;
	private int _status;
	private int _companyTime;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Manager, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Manager)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mvccVersion", _mvccVersion);
		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("managerId", _managerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("firstName", _firstName);
		_columnOriginalValues.put("lastName", _lastName);
		_columnOriginalValues.put("employeeIdPK", _employeeIdPK);
		_columnOriginalValues.put("position", _position);
		_columnOriginalValues.put("stateCode", _stateCode);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("companyTime", _companyTime);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mvccVersion", 1L);

		columnBitmasks.put("uuid_", 2L);

		columnBitmasks.put("managerId", 4L);

		columnBitmasks.put("groupId", 8L);

		columnBitmasks.put("companyId", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedDate", 64L);

		columnBitmasks.put("firstName", 128L);

		columnBitmasks.put("lastName", 256L);

		columnBitmasks.put("employeeIdPK", 512L);

		columnBitmasks.put("position", 1024L);

		columnBitmasks.put("stateCode", 2048L);

		columnBitmasks.put("status", 4096L);

		columnBitmasks.put("companyTime", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Manager _escapedModel;

}